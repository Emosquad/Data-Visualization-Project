for (s in 2:124) {
file_name = paste0(path,date_str[s],"_city.xlsx")
df_seperate = read_xlsx(file_name)
df_city <- dplyr::bind_rows(df_city, df_seperate)
}
df[is.na(df)] = 0
for (s in 2:124) {
file_name = paste0(path,date_str[s],"_city.xlsx")
df_seperate = read_xlsx(file_name)
df_city <- dplyr::bind_rows(df_city, df_seperate)
}
df_city[is.na(df)] = 0
df_city[is.na(df_city)] = 0
# District data set
file_name = paste0(path,date_str[20],"_dis.xlsx")
df_district <- read_xlsx(file_name)
for (s in 21:124) {
file_name = paste0(path,date_str[s],"_dis.xlsx")
df_seperate = read_xlsx(file_name)
df_district <- dplyr::bind_rows(df_district, df_seperate)
}
df[is.na(df)] = 0
# Individual data set
path = "./community/"
file_name = paste0(path,date_str[8],"_geo.xlsx")
df_ind <- read_xlsx(file_name)
for (s in 8:94) {
file_name = paste0(path,date_str[s],"_geo.xlsx")
df_seperate = read_xlsx(file_name)
df_ind <- dplyr::bind_rows(df_ind, df_seperate)
}
View(df_ind)
df_ind[is.na(df_ind)] = 0
file_name = paste0(path,date_str[s],"_geo.xlsx")
for (s in 8:94) {
file_name = paste0(path,date_str[s],"_geo.xlsx")
df_seperate = read_xlsx(file_name)
df_ind <- dplyr::bind_rows(df_ind, df_seperate)
}
View(df_ind)
View(df_seperate)
View(df_ind)
dplyr::bind_rows(df_ind, df_seperate)
typeof(df_ind$日期)
typeof(df_ind$地址)
typeof(df_seperate$地址)
typeof(df_seperate$日期)
typeof(df_ind$性别)
typeof(df_seperate$性别)
typeof(df_ind$年龄)
typeof(df_seperate$年龄)
library(stringr)
str_detect(df_ind$年龄, "月")
View(df_ind)
df_ind$年龄[str_detect(df_ind$年龄, "月")] == 0
df_ind$年龄[str_detect(df_ind$年龄, "月")] = 0
typeof(df_ind$年龄)
df_ind %>%
mutate(年龄 = as.numeric(年龄))
df_ind = df_ind %>%
mutate(年龄 = as.numeric(年龄))
typeof(df_ind$年龄)
# Individual data set
path = "./community/"
file_name = paste0(path,date_str[8],"_geo.xlsx")
df_ind <- read_xlsx(file_name)
df_ind$年龄[str_detect(df_ind$年龄, "月")] = 0
df_ind = df_ind %>%
mutate(年龄 = as.numeric(年龄))
for (s in 8:94) {
file_name = paste0(path,date_str[s],"_geo.xlsx")
df_seperate = read_xlsx(file_name)
df_seperate$年龄[str_detect(df_seperate$年龄, "月")] = 0
df_seperate = df_seperate %>%
mutate(年龄 = as.numeric(年龄))
df_ind <- dplyr::bind_rows(df_ind, df_seperate)
}
View(df_seperate)
View(df_ind)
View(df_seperate)
# Individual data set
path = "./community/"
file_name = paste0(path,date_str[8],"_geo.xlsx")
df_ind <- read_xlsx(file_name)
df_ind$性别 <- NULL
df_ind$年龄 <- NULL
df_ind$类型 <- NULL
for (s in 8:94) {
file_name = paste0(path,date_str[s],"_geo.xlsx")
df_seperate = read_xlsx(file_name)
df_ind$性别 <- NULL
df_ind$年龄 <- NULL
df_ind$类型 <- NULL
df_ind <- dplyr::bind_rows(df_ind, df_seperate)
}
View(df_ind)
View(df_seperate)
typeof(df_seperate$日期)
typeof(df_seperate$地址)
typeof(df_seperate$区)
typeof(df_seperate$经度)
typeof(df_seperate$纬度)
typeof(df_ind$日期)
typeof(df_ind$地址)
typeof(df_ind$区)
typeof(df_ind$经度)
typeof(df_ind$纬度)
df_ind = df_ind %>%
mutate(经度 = as.numeric(经度)) %>%
mutate(纬度 = as.numeric(纬度))
# Individual data set
path = "./community/"
file_name = paste0(path,date_str[8],"_geo.xlsx")
df_ind <- read_xlsx(file_name)
df_ind$性别 <- NULL
df_ind$年龄 <- NULL
df_ind$类型 <- NULL
df_ind = df_ind %>%
mutate(经度 = as.numeric(经度)) %>%
mutate(纬度 = as.numeric(纬度))
for (s in 8:94) {
file_name = paste0(path,date_str[s],"_geo.xlsx")
df_seperate = read_xlsx(file_name)
df_seperate$性别 <- NULL
df_seperate$年龄 <- NULL
df_seperate$类型 <- NULL
df_seperate = df_seperate %>%
mutate(经度 = as.numeric(经度)) %>%
mutate(纬度 = as.numeric(纬度))
df_ind <- dplyr::bind_rows(df_ind, df_seperate)
}
View(df_ind)
shiny::runApp()
View(df_city)
colnames(df_city) <- c('Date', 'Total', 'Positive', 'Asymptomatic',
'Asymptomatic_to_Positive', 'Deaths')
colnames(df_district) <- c('Districts', 'Positive', 'Asymptomatic', 'Date')
colnames(df_ind) <- c('Date', 'Address', 'Districts', 'Longtitude', 'Latitude')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
#plot1
df_city%>%
ggplot(mapping = aes(x=Date, y = Total))+
geom_line()
library(tidyverse)
library(dplyr)
library(comprehenr)
library(readxl)
library(purrr)
#plot1
df_city%>%
ggplot(mapping = aes(x=Date, y = Total))+
geom_line()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
loc_data = df_ind %>%
filter(as.Date(Date, '%Y-%m-%d') == as.Date("2022/03/06", "%Y/%m/%d")) %>%
na.omit() %>%
group_by(lng = round(Longtitude, 3), lat = round(Latitude, 3)) %>%
summarise(N = n()) %>%
mutate(latL = lat - 0.0005) %>%
mutate(latH = lat + 0.0005) %>%
mutate(lngL = lng - 0.0005) %>%
mutate(lngH = lng + 0.0005)
library(tidyverse)
library(dplyr)
library(comprehenr)
library(readxl)
library(purrr)
library(stringr)
loc_data = df_ind %>%
filter(as.Date(Date, '%Y-%m-%d') == as.Date("2022/03/06", "%Y/%m/%d")) %>%
na.omit() %>%
group_by(lng = round(Longtitude, 3), lat = round(Latitude, 3)) %>%
summarise(N = n()) %>%
mutate(latL = lat - 0.0005) %>%
mutate(latH = lat + 0.0005) %>%
mutate(lngL = lng - 0.0005) %>%
mutate(lngH = lng + 0.0005)
m = loc_data %>% leaflet() %>% addTiles() %>%
setView(121.5, 31.2, zoom = 10) %>%
addProviderTiles(providers$Stamen.Toner, group = "Toner") %>%
addLayersControl(baseGroups = c("Toner", "OSM"),
options = layersControlOptions(collapsed = FALSE))%>%
addRectangles(
lng1 =  ~ lngL,
lat1 =  ~ latL,
lng2 =  ~ lngH,
lat2 =  ~ latH,
fillOpacity = ~ N / 150,
fillColor = "red",
label = ~ N
)
library(tidyverse)
library(dplyr)
library(comprehenr)
library(readxl)
library(purrr)
library(stringr)
library(shiny)
library(shinydashboard)
library(leaflet)
library(plotly)
loc_data = df_ind %>%
filter(as.Date(Date, '%Y-%m-%d') == as.Date("2022/03/06", "%Y/%m/%d")) %>%
na.omit() %>%
group_by(lng = round(Longtitude, 3), lat = round(Latitude, 3)) %>%
summarise(N = n()) %>%
mutate(latL = lat - 0.0005) %>%
mutate(latH = lat + 0.0005) %>%
mutate(lngL = lng - 0.0005) %>%
mutate(lngH = lng + 0.0005)
m = loc_data %>% leaflet() %>% addTiles() %>%
setView(121.5, 31.2, zoom = 10) %>%
addProviderTiles(providers$Stamen.Toner, group = "Toner") %>%
addLayersControl(baseGroups = c("Toner", "OSM"),
options = layersControlOptions(collapsed = FALSE))%>%
addRectangles(
lng1 =  ~ lngL,
lat1 =  ~ latL,
lng2 =  ~ lngH,
lat2 =  ~ latH,
fillOpacity = ~ N / 150,
fillColor = "red",
label = ~ N
)
m
m = m %>% addRectangles(
lng1 =  loc_data$lngL,
lat1 =  loc_data$latL,
lng2 =  loc_data$lngH,
lat2 =  loc_data$latH,
fillOpacity = loc_data$N / 150,
fillColor = "red",
label = loc_data$N
)
m
m = loc_data %>% leaflet() %>% addTiles() %>%
setView(121.5, 31.2, zoom = 10) %>%
addProviderTiles(providers$Stamen.Toner, group = "Toner") %>%
addLayersControl(baseGroups = c("Toner", "OSM"),
options = layersControlOptions(collapsed = FALSE))%>%
addRectangles(
lng1 =  ~ lngL,
lat1 =  ~ latL,
lng2 =  ~ lngH,
lat2 =  ~ latH,
fillOpacity = ~ N / 150,
fillColor = "red",
label = ~ N
)
m
loc_data = df_ind %>%
filter(as.Date(Date, '%Y-%m-%d') == as.Date("2022/03/06", "%Y/%m/%d")) %>%
na.omit() %>%
group_by(lng = round(Longtitude, 3), lat = round(Latitude, 3)) %>%
summarise(N = n()) %>%
mutate(latL = lat - 0.0005) %>%
mutate(latH = lat + 0.0005) %>%
mutate(lngL = lng - 0.0005) %>%
mutate(lngH = lng + 0.0005)
m = loc_data %>% leaflet() %>% addTiles() %>%
setView(121.5, 31.2, zoom = 10) %>%
addProviderTiles(providers$Stamen.Toner, group = "Toner") %>%
addLayersControl(baseGroups = c("Toner", "OSM"),
options = layersControlOptions(collapsed = FALSE))%>%
addRectangles(
lng1 =  ~ lngL,
lat1 =  ~ latL,
lng2 =  ~ lngH,
lat2 =  ~ latH,
fillOpacity = ~ N / 150,
fillColor = "red",
label = ~ N
)
m
loc_data = df_ind %>%
filter(as.Date(Date, '%Y-%m-%d') == as.Date("2022/03/07", "%Y/%m/%d")) %>%
na.omit() %>%
group_by(lng = round(Longtitude, 3), lat = round(Latitude, 3)) %>%
summarise(N = n()) %>%
mutate(latL = lat - 0.0005) %>%
mutate(latH = lat + 0.0005) %>%
mutate(lngL = lng - 0.0005) %>%
mutate(lngH = lng + 0.0005)
m = m %>% addRectangles(
lng1 =  loc_data$lngL,
lat1 =  loc_data$latL,
lng2 =  loc_data$lngH,
lat2 =  loc_data$latH,
fillOpacity = loc_data$N / 150,
fillColor = "red",
label = loc_data$N
)
m
loc_data = df_ind %>%
filter(as.Date(Date, '%Y-%m-%d') == as.Date("2022/03/08", "%Y/%m/%d")) %>%
na.omit() %>%
group_by(lng = round(Longtitude, 3), lat = round(Latitude, 3)) %>%
summarise(N = n()) %>%
mutate(latL = lat - 0.0005) %>%
mutate(latH = lat + 0.0005) %>%
mutate(lngL = lng - 0.0005) %>%
mutate(lngH = lng + 0.0005)
m = m %>% addRectangles(
lng1 =  loc_data$lngL,
lat1 =  loc_data$latL,
lng2 =  loc_data$lngH,
lat2 =  loc_data$latH,
fillOpacity = loc_data$N / 150,
fillColor = "red",
label = loc_data$N
)
m
loc_data = df_ind %>%
filter(as.Date(Date, '%Y-%m-%d') == as.Date("2022/03/09", "%Y/%m/%d")) %>%
na.omit() %>%
group_by(lng = round(Longtitude, 3), lat = round(Latitude, 3)) %>%
summarise(N = n()) %>%
mutate(latL = lat - 0.0005) %>%
mutate(latH = lat + 0.0005) %>%
mutate(lngL = lng - 0.0005) %>%
mutate(lngH = lng + 0.0005)
m = m %>% addRectangles(
lng1 =  loc_data$lngL,
lat1 =  loc_data$latL,
lng2 =  loc_data$lngH,
lat2 =  loc_data$latH,
fillOpacity = loc_data$N / 150,
fillColor = "red",
label = loc_data$N
)
m
runApp()
m = loc_data %>% leaflet() %>% addTiles() %>%
setView(121.5, 31.2, zoom = 10) %>%
addProviderTiles(providers$Stamen.Toner, group = "Toner") %>%
addLayersControl(baseGroups = c("Toner", "OSM"),
options = layersControlOptions(collapsed = FALSE))
m = loc_data %>% leaflet() %>% addTiles() %>%
setView(121.5, 31.2, zoom = 10) %>%
addProviderTiles(providers$Stamen.Toner, group = "Toner") %>%
addLayersControl(baseGroups = c("Toner", "OSM"),
options = layersControlOptions(collapsed = FALSE))
for(i in as.Date("2022/03/06", "%Y/%m/%d"):as.Date("2022/05/31", "%Y/%m/%d")) {
loc_data = df_ind %>%
filter(as.Date(Date, '%Y-%m-%d') == as.Date("2022/03/06", "%Y/%m/%d")) %>%
na.omit() %>%
group_by(lng = round(Longtitude, 3), lat = round(Latitude, 3)) %>%
summarise(N = n()) %>%
mutate(latL = lat - 0.0005) %>%
mutate(latH = lat + 0.0005) %>%
mutate(lngL = lng - 0.0005) %>%
mutate(lngH = lng + 0.0005)
m = m %>% addRectangles(
lng1 =  loc_data$lngL,
lat1 =  loc_data$latL,
lng2 =  loc_data$lngH,
lat2 =  loc_data$latH,
fillOpacity = loc_data$N / 150,
fillColor = "red",
label = loc_data$N
)
}
m
runApp()
runApp()
library(tidyverse)
library(dplyr)
library(comprehenr)
library(readxl)
library(purrr)
library(stringr)
library(shiny)
library(shinydashboard)
library(leaflet)
library(plotly)
df_district %>%
ggplot(mapping = aes(x = Date, y = Asymptomatic, color = Districts)) +
geom_line()
shiny::runApp()
1==1&1==1
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
View(df_ind)
shiny::runApp()
runApp()
runApp()
runApp()
gc()
shiny::runApp()
library(shiny); runApp('app(6).R')
runApp('app(6).R')
library(shiny); runApp('app(6).R')
runApp()
runApp()
runApp()
View(df_city)
View(df_city)
runApp()
runApp()
runApp()
getwd()
library(tidyverse)
library(dplyr)
library(comprehenr)
library(readxl)
library(purrr)
library(stringr)
library(shiny)
library(shinydashboard)
library(leaflet)
library(plotly)
library(DT)
date_range = 1:124 + as.Date("2022-02-26")
date_str = c()
for (i in 1:124) {
date_str <- c(date_str, paste0(
as.character(format(date_range[i], format = "%Y")),
as.character(format(date_range[i], format = "%m")),
as.character(format(date_range[i], format = "%d"))))
}
# City data set
path = "./district/"
file_name = paste0(path,date_str[1],"_city.xlsx")
df_city <- read_xlsx(file_name)
for (s in 2:124) {
file_name = paste0(path,date_str[s],"_city.xlsx")
df_seperate = read_xlsx(file_name)
df_city <- dplyr::bind_rows(df_city, df_seperate)
}
df_city[is.na(df_city)] = 0
# District data set
file_name = paste0(path,date_str[20],"_dis.xlsx")
df_district <- read_xlsx(file_name)
for (s in 21:124) {
file_name = paste0(path,date_str[s],"_dis.xlsx")
df_seperate = read_xlsx(file_name)
df_district <- dplyr::bind_rows(df_district, df_seperate)
}
df_district[is.na(df_district)] = 0
# Individual data set
path = "./community/"
View(df_district)
colnames(df_district) <-
c('Districts', 'Positive', 'Asymptomatic', 'Date')
c=df_district%>%
select(Positive,Districts,Asymptomatic)%>%
group_by(Districts)%>%
summarise(posavg = mean(Positive),poscount=sum(Positive),poshigh=max(Positive),asyavg = mean(Asymptomatic), asycount=sum(Asymptomatic),asyhigh=max(Asymptomatic))
c$posavg=round(c$posavg,1)
c$asyavg=round(c$asyavg,1)
View(c)
c_top= c%>% arrange(poscount)
View(c_top)
c_top= c%>% arrange(desc(poscount))
View(c_top)
c_top= c%>% arrange(desc(poscount))%>% dplyr::select( Distircts ) %>%
as.matrix() %>%
as.character
c_top= c%>% arrange(desc(poscount))%>% dplyr::select( Districts ) %>%
as.matrix() %>%
as.character
c_top
c_plot = df_district %>% filter(Districts %in% c_top) %>% mutate(Districts = factor(Districts, levels = c_top)) %>%
arrange(Districts)
View(c_plot)
runApp()
View(c_plot)
View(c_plot)
runApp()
runApp()
runApp()
c_top_a = c %>% arrange(desc(asycount)) %>%
dplyr::select(Districts) %>%
as.matrix() %>%
as.character
c_plot_a = df_district %>% filter(Districts %in% c_top_a) %>%
mutate(Districts = factor(Districts, levels = c_top_a)) %>%
arrange(Districts)
View(c_plot_a)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
